import{_ as n,c as s}from"./app.1c29f384.js";const a={},t=s(`<h1 id="map-parseint" tabindex="-1"><a class="header-anchor" href="#map-parseint" aria-hidden="true">#</a> map parseInt</h1><h2 id="\u9898\u76EE" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE" aria-hidden="true">#</a> \u9898\u76EE</h2><p><code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt)</code> \u8F93\u51FA\u4EC0\u4E48\uFF1F</p><h2 id="parseint" tabindex="-1"><a class="header-anchor" href="#parseint" aria-hidden="true">#</a> parseInt</h2><p><code>parseInt(string, radix)</code> \u89E3\u6790\u4E00\u4E2A\u5B57\u7B26\u4E32\u5E76\u8FD4\u56DE\u6307\u5B9A\u57FA\u6570\u7684<strong>\u5341\u8FDB\u5236</strong>\u6574\u6570</p><ul><li><code>string</code> \u8981\u89E3\u6790\u7684\u5B57\u7B26\u4E32</li><li><code>radix</code> \u53EF\u9009\u53C2\u6570\uFF0C\u6570\u5B57\u57FA\u6570\uFF08\u5373\u8FDB\u5236\uFF09\uFF0C\u8303\u56F4\u4E3A 2-36</li></ul><p>\u793A\u4F8B</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;11&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// NaN \uFF0C1 \u975E\u6CD5\uFF0C\u4E0D\u5728 2-36 \u8303\u56F4\u4E4B\u5185</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;11&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3 = 1*2 + 1</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// NaN \uFF0C2 \u8FDB\u5236\u4E2D\u4E0D\u5B58\u5728 3</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;11&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 4 = 1*3 + 1</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;11&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">// 9 = 1*8 + 1</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">// NaN \uFF0C8 \u8FDB\u5236\u4E2D\u4E0D\u5B58\u5728 9</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;11&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 11</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment">// 10 \uFF0C\u8D85\u8FC7 10 \u8FDB\u5236\uFF0C\u4E2A\u4F4D\u6570\u5C31\u662F 1 2 3 4 5 6 7 8 9 A B C D ...</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment">// 15</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;G&#39;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment">// NaN \uFF0C16 \u8FDB\u5236\u4E2A\u4F4D\u6570\u6700\u591A\u662F F \uFF0C\u4E0D\u5B58\u5728 G</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;1F&#39;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment">// 31 = 1*16 + F</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="radix-null-\u6216\u8005-radix-0" tabindex="-1"><a class="header-anchor" href="#radix-null-\u6216\u8005-radix-0" aria-hidden="true">#</a> radix == null \u6216\u8005 radix === 0</h2><ul><li>\u5982\u679C <code>string</code> \u4EE5 <code>0x</code> \u5F00\u5934\uFF0C\u5219\u6309\u7167 16 \u8FDB\u5236\u5904\u7406\uFF0C\u4F8B\u5982 <code>parseInt(&#39;0x1F&#39;)</code> \u7B49\u540C\u4E8E <code>parseInt(&#39;1F&#39;, 16)</code></li><li>\u5982\u679C <code>string</code> \u4EE5 <code>0</code> \u5F00\u5934\uFF0C\u5219\u6309\u7167 8 \u8FDB\u5236\u5904\u7406 \u2014\u2014 <strong>ES5 \u4E4B\u540E\u5C31\u53D6\u6D88\u4E86\uFF0C\u6539\u4E3A\u6309 10 \u8FDB\u5236\u5904\u7406\uFF0C\u4F46\u4E0D\u662F\u6240\u6709\u6D4F\u89C8\u5668\u90FD\u8FD9\u6837\uFF0C\u4E00\u5B9A\u6CE8\u610F\uFF01\uFF01\uFF01</strong></li><li>\u5176\u4ED6\u60C5\u51B5\uFF0C\u6309 10 \u8FDB\u5236\u5904\u7406</li></ul><h2 id="\u5206\u6790\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u5206\u6790\u4EE3\u7801" aria-hidden="true">#</a> \u5206\u6790\u4EE3\u7801</h2><p>\u9898\u76EE\u4EE3\u7801\u53EF\u4EE5\u62C6\u89E3\u4E3A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">s is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>s<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, index is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5206\u6790\u6267\u884C\u8FC7\u7A0B</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 1 \uFF0Cradix === 0 \u6309 10 \u8FDB\u5236\u5904\u7406</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// NaN \uFF0Cradix === 1 \u975E\u6CD5\uFF08\u4E0D\u5728 2-36 \u4E4B\u5185\uFF09</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// NaN \uFF0C2 \u8FDB\u5236\u4E2D\u6CA1\u6709 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7B54\u6848" tabindex="-1"><a class="header-anchor" href="#\u7B54\u6848" aria-hidden="true">#</a> \u7B54\u6848</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span> <span class="token comment">// [1, NaN, NaN]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u5212\u91CD\u70B9" tabindex="-1"><a class="header-anchor" href="#\u5212\u91CD\u70B9" aria-hidden="true">#</a> \u5212\u91CD\u70B9</h2><ul><li>\u8981\u77E5\u9053 <code>parseInt</code> \u53C2\u6570\u7684\u5B9A\u4E49</li><li>\u628A\u4EE3\u7801\u62C6\u89E3\u5230\u6700\u7EC6\u7C92\u5EA6\uFF0C\u518D\u9010\u6B65\u5206\u6790</li></ul><h2 id="\u6269\u5C55" tabindex="-1"><a class="header-anchor" href="#\u6269\u5C55" aria-hidden="true">#</a> \u6269\u5C55</h2><p>\u4E3A\u4F55 eslint \u5EFA\u8BAE <code>partInt</code> \u8981\u6307\u5B9A <code>radix</code>\uFF08\u7B2C\u4E8C\u4E2A\u53C2\u6570\uFF09\uFF1F<br> \u56E0\u4E3A <code>parseInt(&#39;011&#39;)</code> \u65E0\u6CD5\u786E\u5B9A\u662F 8 \u8FDB\u5236\u8FD8\u662F 10 \u8FDB\u5236\uFF0C\u56E0\u6B64\u5FC5\u987B\u7ED9\u51FA\u660E\u786E\u6307\u793A\u3002</p>`,21);function p(e,c){return t}var i=n(a,[["render",p],["__file","03-map-parseInt.html.vue"]]);export{i as default};
